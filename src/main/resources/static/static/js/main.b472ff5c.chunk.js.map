{"version":3,"sources":["logo.svg","Contexts/CategoryManager/CategoryManager.jsx","Components/NavigationBar/NavigationBar.jsx","Contexts/TransactionsManager/TransactionsManager.jsx","Components/Transactions/AddBudgetItem/AddBudgetItem.jsx","Components/Charts/CategoryPieChart.jsx","Components/MoneyDisplay/MoneyDisplay.jsx","Components/Transactions/TransactionItem/TransactionItem.jsx","Components/Transactions/TransactionList/TransactionList.jsx","Components/Transactions/TransactionViewer/TransactionViewer.jsx","Components/Transactions/TransactionViewer/ExpenseViewer.jsx","Components/Transactions/TransactionViewer/IncomeViewer.jsx","Components/Categories/CategoryViewer/CategoryItem.jsx","Components/Categories/CategoryViewer/CategoryList.jsx","Components/Categories/AddCategoryItem/AddCategoryItem.jsx","Components/Categories/CategoryViewer/CategoryViewer.jsx","Components/AppRouter/AppRouter.jsx","App.js","reportWebVitals.js","index.js"],"names":["CategoryContext","React","createContext","CategoryManager","props","useState","categories","setCategories","id","a","fetch","method","headers","response","json","data","console","error","categoryName","body","JSON","stringify","updateCategories","useEffect","Provider","value","addCategory","getCategoryById","deleteCategory","children","NavigationBar","className","to","TransactionContext","TransactionsManager","useContext","transactions","setTransactions","amount","category","note","transactionDate","categoryObject","url","log","updateTransactions","addTransaction","deleteTransaction","AddBudgetItem","today","Date","toISOString","substr","formRef","useRef","dollars","setDollars","cents","setCents","selectedCategory","setSelectedCategory","setNote","date","setDate","handleSubmit","event","preventDefault","parseFloat","income","resetForm","onSubmit","onReset","ref","htmlFor","type","name","min","max","onChange","e","parseInt","target","size","Consumer","map","placeholder","CategoryPieChart","forEach","runningTotal","transaction","push","ResponsiveContainer","width","height","BarChart","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Legend","Bar","fill","MoneyDisplay","positive","toFixed","negative","TransactionItem","onClick","TransactionList","sort","setSort","descending","setDescending","filter","getTotal","sortedTransactions","b","categoryNameA","toUpperCase","categoryNameB","itemA","itemB","reverse","sortTransactions","TransactionViewer","ExpenseViewer","IncomeViewer","CategoryItem","CategoryList","sortedCategories","setName","CategoryViewer","AppRouter","baseName","exact","path","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b472ff5c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useEffect, useState } from \"react\";\r\n\r\nexport const CategoryContext = React.createContext();\r\n\r\nexport function CategoryManager(props) {\r\n    \r\n    let [categories, setCategories] = useState([]);\r\n\r\n    useEffect(() => {\r\n        updateCategories()\r\n    }, []); \r\n\r\n    async function getCategoryById(id) {\r\n        try {\r\n            const response = await fetch(`http://127.0.0.1:8080/categories/${id}`, {\r\n            method: 'GET', \r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n            }})\r\n\r\n\r\n            const data = await response.json();\r\n            \r\n            return data\r\n\r\n        } catch (error) {\r\n            console.error('error', error)\r\n        }\r\n    }\r\n\r\n    async function addCategory(categoryName) {\r\n        try {\r\n            const body = JSON.stringify({categoryName});\r\n\r\n            const response = await fetch(\"http://127.0.0.1:8080/categories/add\", {\r\n            method: 'POST', \r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n            },\r\n                body\r\n            })\r\n            \r\n            await updateCategories()\r\n        } catch (error) {\r\n            console.error('error', error)\r\n        }\r\n        \r\n    }\r\n\r\n    async function updateCategories() { \r\n        try {\r\n            const response = await fetch(\"http://127.0.0.1:8080/categories/all\", {\r\n                method: 'GET', \r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json',\r\n                }\r\n            })\r\n\r\n            const data = await response.json();\r\n\r\n            setCategories(data)\r\n        } catch (error) {\r\n            console.error('error', error)\r\n        }\r\n    }\r\n\r\n    async function deleteCategory(id) { \r\n        try {\r\n            const response = await fetch(`http://127.0.0.1:8080/categories/delete?id=${id}`, {\r\n                method: 'DELETE', \r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json',\r\n                }\r\n            })\r\n\r\n            updateCategories();\r\n        } catch (error) {\r\n            console.error('error', error)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <CategoryContext.Provider value={{ categories, setCategories, addCategory, updateCategories, getCategoryById, deleteCategory }}>\r\n            { props.children }\r\n        </CategoryContext.Provider>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {\r\n    Link\r\n  } from \"react-router-dom\";\r\n\r\nexport default function NavigationBar() {\r\n    return (\r\n        <div className=\"navbar\" >\r\n            <nav>\r\n                <ul className=\"nav-ul\">\r\n                    <li className=\"nav-li\">\r\n                        <Link to=\"/\">Transactions</Link>\r\n                    </li>\r\n                    <li className=\"nav-li\">\r\n                        <Link to=\"/income\">Income</Link>\r\n                    </li>\r\n                    <li className=\"nav-li\">\r\n                        <Link to=\"/expenses\">Expenses</Link>\r\n                    </li>\r\n                    <li className=\"nav-li\">\r\n                        <Link to=\"/categories\">Categories</Link>\r\n                    </li>\r\n                </ul>\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect, useContext, createContext } from 'react'\r\nimport { CategoryContext } from '../CategoryManager/CategoryManager';\r\n\r\nexport const TransactionContext = React.createContext();\r\n\r\nexport function TransactionsManager(props) {\r\n\r\n    const categories = useContext(CategoryContext);\r\n\r\n    let [transactions, setTransactions] = useState([]);\r\n\r\n    useEffect(() => {\r\n        updateTransactions()\r\n    }, []); \r\n\r\n    async function addTransaction(amount, category, note, transactionDate) {\r\n\r\n        // fetch Catgeory from categoryID\r\n        const categoryObject = await categories.getCategoryById(category)\r\n\r\n        // convert payload to json\r\n        let url = \"\";\r\n\r\n        console.log(amount)\r\n\r\n        // route url based on income or expense\r\n        if(amount >= 0) {\r\n            url = \"http://localhost:8080/transactions/addIncome\"\r\n        } else {\r\n            url = \"http://localhost:8080/transactions/addExpense\"\r\n        }\r\n        const body = JSON.stringify({amount, category:categoryObject, note, transactionDate});\r\n\r\n        try {\r\n\r\n            const response = await fetch(url, {\r\n                method: 'POST', \r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body\r\n            })\r\n        } catch(error) {\r\n            console.error('error', error)\r\n        }\r\n        \r\n        await updateTransactions();\r\n    }\r\n\r\n    async function deleteTransaction(id) {\r\n        try {\r\n            const response = await fetch(`http://localhost:8080/transactions/delete/?id=${id}`, {\r\n                method: 'DELETE', \r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json',\r\n                }\r\n            })\r\n\r\n            await updateTransactions();\r\n        } catch(error) {\r\n            console.error('error', error)\r\n        }\r\n    }\r\n\r\n    async function updateTransactions() {\r\n        try {\r\n            const response = await fetch(\"http://localhost:8080/transactions/all\", {\r\n                method: 'GET', \r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json',\r\n                }\r\n            })\r\n    \r\n            const data = await response.json()\r\n    \r\n            await setTransactions(data)\r\n        } catch(error) {\r\n            console.error('error', error)\r\n        }\r\n    }\r\n\r\n    function getTransactionById(id) {\r\n        // cast to int\r\n        const intId = parseInt(id)\r\n\r\n        // check if id matches\r\n        const matchingTransaction = transactions.find(transaction => transaction.id === intId);\r\n\r\n        return matchingTransaction\r\n    }\r\n\r\n    return (\r\n\r\n        <TransactionContext.Provider value={ { transactions, setTransactions, addTransaction, updateTransactions, deleteTransaction } }>\r\n            { props.children }\r\n        </TransactionContext.Provider>\r\n    )\r\n}","import { render } from '@testing-library/react';\r\nimport React, { useState, useContext, useEffect, useRef } from 'react'\r\nimport { CategoryContext, CategoryManager } from '../../../Contexts/CategoryManager/CategoryManager';\r\nimport { TransactionContext } from '../../../Contexts/TransactionsManager/TransactionsManager';\r\nimport CategorySelector from '../../Categories/CategorySelector/CategorySelector';\r\n\r\nexport default function AddBudgetItem(props) {\r\n\r\n    const transactions = useContext(TransactionContext);\r\n\r\n    const categories = useContext(CategoryContext);\r\n\r\n    let today = new Date().toISOString().substr(0, 10)\r\n\r\n    const formRef = useRef(null)\r\n\r\n    const [dollars, setDollars] = useState(0);\r\n\r\n    const [cents, setCents] = useState(0);\r\n\r\n    const [selectedCategory, setSelectedCategory] = useState(1);\r\n\r\n    const [note, setNote] = useState('');\r\n\r\n    const [date, setDate] = useState(today);\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n\r\n        const centFloat = cents/100;\r\n        const amount = parseFloat(dollars+centFloat)\r\n\r\n        if(props.income) {\r\n            transactions.addTransaction(amount, selectedCategory, note, date);\r\n        } else {\r\n            // flip amount to negative\r\n            transactions.addTransaction(amount*-1, selectedCategory, note, date);\r\n        }\r\n\r\n        resetForm();\r\n    }\r\n\r\n    const handleDollarChange = (e) => {\r\n        setDollars(parseInt(e.target.value))\r\n    }\r\n\r\n    const handleCentsChange = (e) => {\r\n        setCents(parseInt(e.target.value))\r\n    }\r\n\r\n    const handleCategory = (e) => {\r\n        setSelectedCategory(e.target.value)\r\n    }\r\n\r\n    const handleNote = (e) => {\r\n        setNote(e.target.value)\r\n    }\r\n\r\n    const handleDate = (e) => {\r\n        setDate(e.target.value)\r\n    }\r\n\r\n    const resetForm = () => {\r\n        setDollars(0);\r\n        setCents(0);\r\n        setNote('');\r\n    }\r\n\r\n    return (\r\n        <div className=\"add-transaction-form-container\">\r\n\r\n            <form className=\"add-transaction-form\" onSubmit={handleSubmit} onReset={resetForm} ref={formRef}>\r\n                <div>\r\n                    <label htmlFor=\"transactionDollarAmount\">Enter dollar amount of transaction:</label>\r\n                    <div>\r\n                        <span>{ props.income ? \"\" : \"-\" }$<input type=\"number\" name=\"transactionDollarAmount\" id=\"transactionDollarAmount\" min=\"0\" max=\"99999\" value={dollars} onChange={handleDollarChange}/>.<input type=\"number\" min=\"0\" max=\"99\" size=\"2\" value={cents} onChange={handleCentsChange}/></span>\r\n                    </div>\r\n                    \r\n                </div>\r\n                \r\n                <CategoryManager>\r\n                    <div>\r\n                        <label htmlFor=\"transactionCategory\">Set a category for the transaction:</label>\r\n                        <select name=\"transactionCategory\" value={selectedCategory} onChange={handleCategory}>\r\n                        <CategoryContext.Consumer>\r\n                            {categories => categories.categories.map(category => (<option key={category.id} value={category.id}>{category.categoryName}</option>))}\r\n                        </CategoryContext.Consumer> \r\n                        </select>\r\n                    </div>\r\n                </CategoryManager>\r\n\r\n                <div>\r\n                    <label htmlFor=\"transactionNote\">Set a note for the transaction:</label>\r\n                    <div>\r\n                        <input name=\"transactionNote\" type=\"text\" placeholder=\"Note\" value={note} onChange={handleNote}/>\r\n                    </div>\r\n                    \r\n                </div>\r\n                \r\n                <div>\r\n                    <label htmlFor=\"transactionDate\">Date of transaction:</label>\r\n                    <div>\r\n                        <input name=\"transactionDate\" type=\"date\" placeholder=\"Date\" value={date} onChange={handleDate} />\r\n                    </div>\r\n                    \r\n                </div>\r\n                \r\n                <div className=\"form-button-container\">\r\n                    <button type=\"reset\" className=\"form-button reset-button\">Clear</button>\r\n                    <button type=\"submit\" className=\"form-button submit-button\">Submit</button>\r\n                </div>\r\n                \r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useContext } from 'react'\r\nimport { ResponsiveContainer, PieChart, Pie, BarChart, CartesianGrid, XAxis, YAxis, Tooltip, Legend, Bar } from 'recharts'\r\nimport { CategoryContext, CategoryManager } from '../../Contexts/CategoryManager/CategoryManager'\r\nimport { TransactionContext } from '../../Contexts/TransactionsManager/TransactionsManager'\r\n\r\n\r\nexport default function CategoryPieChart() {\r\n\r\n    const transactions = useContext(TransactionContext)\r\n    const categories = useContext(CategoryContext)\r\n\r\n    console.log(categories)\r\n\r\n    let data = [];\r\n\r\n    const buildChart = () => {\r\n        \r\n\r\n        categories.categories.forEach(category => {\r\n            let runningTotal = 0;\r\n            transactions.transactions.forEach(transaction => {\r\n                console.log('transaction :>> ', transaction);\r\n                if(transaction.category.categoryName === category.categoryName) {\r\n                    runningTotal += transaction.amount;\r\n                }\r\n            })\r\n\r\n            data.push({name: category.categoryName, amount: runningTotal})\r\n        });\r\n    }\r\n    \r\n    buildChart()\r\n\r\n    return (\r\n        <CategoryManager>\r\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                <BarChart width={730} height={250} data={data}>\r\n                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                    <XAxis dataKey=\"name\" />\r\n                    <YAxis />\r\n                    <Tooltip />\r\n                    <Legend />\r\n                    <Bar dataKey=\"amount\" fill=\"#8884d8\" />\r\n                </BarChart>\r\n\r\n            </ResponsiveContainer>\r\n        </CategoryManager>\r\n            \r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function MoneyDisplay(props) {\r\n\r\n    let positive = props.amount.toFixed(2);\r\n    let negative = (props.amount * -1).toFixed(2)\r\n\r\n    return (\r\n        <div className={props.amount >= 0 ? \"positive-number\" : \"negative-number\"}>\r\n            { props.amount >= 0 ? `$${positive}` : `-$${negative}` }\r\n        </div>\r\n    )\r\n}\r\n","import React, { useContext } from 'react'\r\nimport { TransactionContext } from '../../../Contexts/TransactionsManager/TransactionsManager'\r\nimport MoneyDisplay from '../../MoneyDisplay/MoneyDisplay'\r\n\r\n\r\nexport default function TransactionItem(props) {\r\n\r\n    const transactions = useContext(TransactionContext);\r\n\r\n    const handleDelete = () => {\r\n        transactions.deleteTransaction(props.id)\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"transaction-item\">\r\n            <span><MoneyDisplay amount={props.dollars}></MoneyDisplay></span>\r\n            <span>{props.category ? props.category : 'Empty'}</span>\r\n            <span>{props.note}</span>\r\n            <span>{props.transactionDate}</span>\r\n            <span><button onClick={handleDelete}>Delete</button></span>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useContext, useState } from 'react'\r\nimport { TransactionContext } from '../../../Contexts/TransactionsManager/TransactionsManager'\r\nimport CategoryPieChart from '../../Charts/CategoryPieChart';\r\nimport MoneyDisplay from '../../MoneyDisplay/MoneyDisplay';\r\nimport TransactionItem from '../TransactionItem/TransactionItem'\r\n\r\nexport default function TransactionList(props) {\r\n\r\n    const transactions = useContext(TransactionContext)\r\n\r\n    // amount | category | note | transactionDate\r\n    const [sort, setSort] = useState(\"amount\")\r\n\r\n    // descending | ascending\r\n    const [descending, setDescending] = useState(true)\r\n\r\n    if(props.filter === \"expense\") {\r\n        transactions.transactions =  transactions.transactions.filter(transaction => transaction.amount < 0);\r\n    }\r\n\r\n    if(props.filter === \"income\") {\r\n        transactions.transactions =  transactions.transactions.filter(transaction => transaction.amount >= 0);\r\n    }\r\n\r\n    const getTotal = () => {\r\n        let value = 0;\r\n        transactions.transactions.forEach(transaction => {\r\n            value += transaction.amount\r\n        })\r\n\r\n        return value;\r\n    }\r\n\r\n    let changeSortToAmount = () => {\r\n        if(sort !== \"amount\") {\r\n            setSort(\"amount\")\r\n        } else {\r\n            setDescending(!descending)\r\n        }   \r\n    }\r\n\r\n    let changeSortToCategory = () => {\r\n\r\n        if(sort !== \"category\") {\r\n            setSort(\"category\")\r\n        } else {\r\n            setDescending(!descending)\r\n        }\r\n    }\r\n\r\n    let changeSortToNote = () => {\r\n\r\n        if(sort !== \"note\") {\r\n            setSort(\"note\")\r\n        } else {\r\n            setDescending(!descending)\r\n        }\r\n            \r\n    }\r\n\r\n    let changeSortToDate = () => {\r\n        if(sort !== \"transactionDate\") {\r\n            setSort(\"transactionDate\")\r\n        } else {\r\n            setDescending(!descending)\r\n        }\r\n    }\r\n\r\n    let sortTransactions = () => {\r\n\r\n        let sortedTransactions = []\r\n\r\n        if(sort === \"category\") {\r\n            sortedTransactions = transactions.transactions.sort((a, b) => {\r\n                console.log(a)\r\n                let categoryNameA = a.category.categoryName.toUpperCase();\r\n                let categoryNameB = b.category.categoryName.toUpperCase();\r\n\r\n            if(categoryNameA > categoryNameB) {\r\n                return 1;\r\n            }\r\n\r\n            if(categoryNameA < categoryNameB) {\r\n                return -1;\r\n            }\r\n            \r\n            return 0;\r\n            })\r\n            \r\n        } else {\r\n            sortedTransactions = transactions.transactions.sort((a, b) => {\r\n                let itemA = a[sort];\r\n                let itemB = b[sort];\r\n        \r\n                if(itemA > itemB) {\r\n                    return 1;\r\n                }\r\n        \r\n                if(itemA < itemB) {\r\n                    return -1;\r\n                }\r\n                \r\n                return 0;\r\n            })\r\n        }\r\n        \r\n\r\n        if(descending) {\r\n            sortedTransactions.reverse();\r\n        }\r\n\r\n        return sortedTransactions;\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"transaction-list\">\r\n            <div className=\"sum-line\"><MoneyDisplay amount={ getTotal() }></MoneyDisplay></div>\r\n            \r\n            <div className=\"chart-display\">\r\n                <CategoryPieChart />\r\n            </div>\r\n            <div className=\"transaction-list-header\">\r\n                <div onClick={changeSortToAmount}>Amount</div>\r\n                <div onClick={changeSortToCategory}>Category</div>\r\n                <div onClick={changeSortToNote}>Note</div>\r\n                <div onClick={changeSortToDate}>Date</div>\r\n                <div></div>\r\n            </div>\r\n            \r\n            { sortTransactions().map(transaction => <TransactionItem key={transaction.id} id={transaction.id} dollars={transaction.amount} category={ transaction.category ? transaction.category.categoryName : ''} note={transaction.note} transactionDate={transaction.transactionDate}></TransactionItem>) }\r\n            \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { TransactionsManager } from '../../../Contexts/TransactionsManager/TransactionsManager'\r\nimport AddBudgetItem from '../AddBudgetItem/AddBudgetItem'\r\nimport TransactionList from '../TransactionList/TransactionList'\r\n\r\nexport default function TransactionViewer() {\r\n    return (\r\n        <div className=\"content-pane\">\r\n            <TransactionsManager>\r\n                <div className=\"transaction-viewer-container\">\r\n                    <h1>Transactions</h1>\r\n                    <TransactionList/>\r\n\r\n                </div> \r\n            </TransactionsManager>           \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { TransactionsManager } from '../../../Contexts/TransactionsManager/TransactionsManager'\r\nimport AddBudgetItem from '../AddBudgetItem/AddBudgetItem'\r\nimport TransactionList from '../TransactionList/TransactionList'\r\n\r\nexport default function ExpenseViewer() {\r\n    return (\r\n        <div className=\"content-pane\">\r\n            \r\n            <TransactionsManager>\r\n                <div className=\"transaction-viewer-container\">\r\n                    <h1>Expenses</h1>\r\n                    <TransactionList filter=\"expense\"/>\r\n                </div>\r\n                <div className=\"transaction-add-container\">\r\n                    <h1>Add Expense</h1>\r\n                    <AddBudgetItem income={false} />\r\n                </div>\r\n            </TransactionsManager>           \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { TransactionsManager } from '../../../Contexts/TransactionsManager/TransactionsManager'\r\nimport AddBudgetItem from '../AddBudgetItem/AddBudgetItem'\r\nimport TransactionList from '../TransactionList/TransactionList'\r\n\r\nexport default function IncomeViewer() {\r\n    return (\r\n        <div className=\"content-pane\">\r\n            <TransactionsManager> \r\n                <div className=\"transaction-viewer-container\">\r\n                    <h1>Income</h1>\r\n                    <TransactionList filter=\"income\"/>\r\n                    \r\n                </div>  \r\n                <div className=\"transaction-add-container\">\r\n                    <h1>Add Income</h1>\r\n                    <AddBudgetItem income={true} />\r\n                </div>   \r\n            </TransactionsManager>           \r\n        </div>\r\n    )\r\n}\r\n","import React, { useContext } from 'react'\r\nimport { CategoryContext } from '../../../Contexts/CategoryManager/CategoryManager'\r\n\r\nexport default function CategoryItem(props) {\r\n\r\n    const categories = useContext(CategoryContext)\r\n\r\n    const handleDelete = () => {\r\n        categories.deleteCategory(props.id)\r\n    }\r\n\r\n    return (\r\n        <div className=\"category-list-item\">\r\n            <span>{props.categoryName}</span>\r\n            {props.categoryName != \"None\" ? <span><button onClick={handleDelete}>Delete</button></span> : null}\r\n        </div>\r\n    )\r\n}\r\n","import React, { useContext } from 'react'\r\nimport { CategoryContext } from '../../../Contexts/CategoryManager/CategoryManager';\r\nimport CategoryItem from './CategoryItem';\r\n\r\nexport default function CategoryList(props) {\r\n\r\n    const categories = useContext(CategoryContext);\r\n\r\n    const sortedCategories = categories.categories.sort((a, b) => {\r\n        let categoryNameA = a.categoryName.toUpperCase();\r\n        let categoryNameB = b.categoryName.toUpperCase();\r\n\r\n        if(categoryNameA > categoryNameB) {\r\n            return 1;\r\n        }\r\n\r\n        if(categoryNameA < categoryNameB) {\r\n            return -1;\r\n        }\r\n        \r\n        return 0;\r\n    })\r\n\r\n\r\n    return (\r\n        <div className=\"transaction-list\">\r\n            <div className=\"transaction-list-header\">\r\n                <div>Name</div>\r\n            </div>\r\n            { sortedCategories.map(category => <CategoryItem key={category.id} id={category.id} categoryName={category.categoryName}></CategoryItem>) }\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useContext, useEffect, useRef } from 'react'\r\nimport { CategoryContext } from '../../../Contexts/CategoryManager/CategoryManager';\r\n\r\nexport default function AddBudgetItem(props) {\r\n\r\n    const categories = useContext(CategoryContext);\r\n\r\n    const [name, setName] = useState(\"\")\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        categories.addCategory(name);\r\n        resetForm();\r\n    }\r\n\r\n    const handleNameChange = (e) => {\r\n        setName(e.target.value)\r\n    }\r\n\r\n    const resetForm = () => {\r\n        setName(\"\")\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form className=\"add-transaction-form\" onSubmit={handleSubmit}>\r\n                <div>\r\n                    <label htmlFor=\"categoryName\">Enter name of category:</label>\r\n                    <div>\r\n                        <input type=\"text\" name=\"categoryName\" id=\"categoryName\" value={name} onChange={handleNameChange}/>\r\n                    </div>\r\n                    \r\n                </div>\r\n            \r\n                <button>Submit</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { CategoryManager } from '../../../Contexts/CategoryManager/CategoryManager'\r\nimport CategoryList from './CategoryList'\r\nimport AddCategoryItem from '../AddCategoryItem/AddCategoryItem'\r\n\r\n\r\nexport default function CategoryViewer() {\r\n    return (\r\n        <div className=\"content-pane\">\r\n            \r\n            <CategoryManager>\r\n                \r\n                <div className=\"transaction-viewer-container\">\r\n                    <h1>Categories</h1>\r\n                    <CategoryList />\r\n                    \r\n                </div>\r\n                <div className=\"transaction-add-container\">\r\n                    <h1>Add Category</h1>\r\n                    <AddCategoryItem />\r\n                </div>\r\n\r\n            </CategoryManager>    \r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\n\r\nimport NavigationBar from \"../NavigationBar/NavigationBar\";\r\nimport TransactionViewer from \"../Transactions/TransactionViewer/TransactionViewer\";\r\nimport ExpenseViewer from \"../Transactions/TransactionViewer/ExpenseViewer\";\r\nimport IncomeViewer from \"../Transactions/TransactionViewer/IncomeViewer\"; \r\nimport CategoryViewer from \"../Categories/CategoryViewer/CategoryViewer\";\r\nimport { CategoryManager } from \"../../Contexts/CategoryManager/CategoryManager\";\r\nimport Home from \"../../Pages/Home\";\r\n\r\nexport default function AppRouter() {\r\n  return (\r\n    <Router baseName=\"/\">\r\n      <NavigationBar></NavigationBar>\r\n      <div className=\"content\">\r\n        <Switch>\r\n          <CategoryManager>\r\n          <Route exact path=\"/\">\r\n            <TransactionViewer />\r\n          </Route>\r\n            <Route path=\"/income\">\r\n              <IncomeViewer />\r\n            </Route>\r\n            <Route path=\"/expenses\">\r\n              <ExpenseViewer />\r\n            </Route>\r\n            <Route path=\"/categories\">\r\n              <CategoryViewer />\r\n            </Route>\r\n          </CategoryManager>   \r\n          <Route path=\"*\">\r\n            <div>404</div>\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}","import logo from './logo.svg';\nimport './App.css';\nimport { CategoryManager, CategoryContext } from './Contexts/CategoryManager/CategoryManager';\nimport AppRouter from './Components/AppRouter/AppRouter';\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n\n      \n        <AppRouter />\n      \n        \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}